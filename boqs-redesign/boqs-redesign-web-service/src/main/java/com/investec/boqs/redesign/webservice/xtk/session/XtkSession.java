
package com.investec.boqs.redesign.webservice.xtk.session;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import javax.net.ssl.SSLSession;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "XtkSession",
        targetNamespace = "urn:xtk:session",
        wsdlLocation = "poc-xtk-session-wsdl.xml")
public class XtkSession
    extends Service
{

    // logger
    private final Logger LOG = LoggerFactory.getLogger(XtkSession.class);

    private final static URL XTKSESSION_WSDL_LOCATION;
    private final static WebServiceException XTKSESSION_EXCEPTION;
    private final static QName XTKSESSION_QNAME = new QName("urn:xtk:session", "XtkSession");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            //url = new URL("http://campaign43-us.ats.adobe.com/nl/jsp/schemawsdl.jsp?schema=xtk:session&__sessiontoken=___F9D10FDF-058C-4529-9138-BF4B6975627B");
            url = XtkSession.class.getClassLoader().getResource("poc-xtk-session-wsdl.xml");
        } catch (Exception ex) {
            e = new WebServiceException(ex);
        }
        XTKSESSION_WSDL_LOCATION = url;
        XTKSESSION_EXCEPTION = e;
    }

    public XtkSession() {
        super(__getWsdlLocation(), XTKSESSION_QNAME);
    }

    public XtkSession(WebServiceFeature... features) {
        super(__getWsdlLocation(), XTKSESSION_QNAME, features);
    }

    public XtkSession(URL wsdlLocation, boolean disableSSLChecking) {
        super(wsdlLocation, XTKSESSION_QNAME);
        if(disableSSLChecking){
            disableSslVerification();
        }
    }

    public XtkSession(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, XTKSESSION_QNAME, features);
    }

    public XtkSession(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public XtkSession(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }


    /**
     * This method is to be used to disable the ssl checking for non prod servers
     */
    private void disableSslVerification() {
        try
        {
            // Create a trust manager that does not validate certificate chains
            TrustManager[] trustAllCerts = new TrustManager[] {new X509TrustManager() {
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }
                public void checkClientTrusted(X509Certificate[] certs, String authType) {
                }
                public void checkServerTrusted(X509Certificate[] certs, String authType) {
                }
            }
            };

            // Install the all-trusting trust manager
            SSLContext sc = SSLContext.getInstance("SSL");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            // Create all-trusting host name verifier
            HostnameVerifier allHostsValid = new HostnameVerifier() {
                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            };

            // Install the all-trusting host verifier
            HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
        } catch (NoSuchAlgorithmException e) {
            LOG.error("NoSuchAlgorithmException Exception !! :" + e);
        } catch (KeyManagementException e) {
            LOG.error("KeyManagementException Exception !! :" + e);
        }
    }

    /**
     * 
     * @return
     *     returns SessionMethodsSoap
     */
    @WebEndpoint(name = "sessionMethodsSoap")
    public SessionMethodsSoap getSessionMethodsSoap() {
        return super.getPort(new QName("urn:xtk:session", "sessionMethodsSoap"), SessionMethodsSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SessionMethodsSoap
     */
    @WebEndpoint(name = "sessionMethodsSoap")
    public SessionMethodsSoap getSessionMethodsSoap(WebServiceFeature... features) {
        return super.getPort(new QName("urn:xtk:session", "sessionMethodsSoap"), SessionMethodsSoap.class, features);
    }

    private static URL __getWsdlLocation() {
        if (XTKSESSION_EXCEPTION!= null) {
            throw XTKSESSION_EXCEPTION;
        }
        return XTKSESSION_WSDL_LOCATION;
    }

}
