
package com.investec.boqs.redesign.webservice.xtk.session;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "sessionMethodsSoap", targetNamespace = "urn:xtk:session")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface SessionMethodsSoap {


    /**
     * 
     * @param parameters
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "NewInstance", action = "xtk:persist#NewInstance")
    @WebResult(name = "NewInstanceResponse", targetNamespace = "urn:xtk:session", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Element newInstance(
        @WebParam(name = "NewInstance", targetNamespace = "urn:xtk:session", partName = "parameters")
        NewInstance parameters);

    /**
     * 
     * @param parameters
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "Duplicate", action = "xtk:persist#Duplicate")
    @WebResult(name = "DuplicateResponse", targetNamespace = "urn:xtk:session", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Element duplicate(
        @WebParam(name = "Duplicate", targetNamespace = "urn:xtk:session", partName = "parameters")
        Duplicate parameters);

    /**
     * 
     * @param parameters
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "DuplicateWithMappingId", action = "xtk:persist#DuplicateWithMappingId")
    @WebResult(name = "DuplicateWithMappingIdResponse", targetNamespace = "urn:xtk:session", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Element duplicateWithMappingId(
        @WebParam(name = "DuplicateWithMappingId", targetNamespace = "urn:xtk:session", partName = "parameters")
        DuplicateWithMappingId parameters);

    /**
     * 
     * @param parameters
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "DuplicateTo", action = "xtk:persist#DuplicateTo")
    @WebResult(name = "DuplicateToResponse", targetNamespace = "urn:xtk:session", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Element duplicateTo(
        @WebParam(name = "DuplicateTo", targetNamespace = "urn:xtk:session", partName = "parameters")
        DuplicateTo parameters);

    /**
     * 
     * @param parameters
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "ApplyDuplicateRules", action = "xtk:persist#ApplyDuplicateRules")
    @WebResult(name = "ApplyDuplicateRulesResponse", targetNamespace = "urn:xtk:session", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Element applyDuplicateRules(
        @WebParam(name = "ApplyDuplicateRules", targetNamespace = "urn:xtk:session", partName = "parameters")
        ApplyDuplicateRules parameters);

    /**
     * 
     * @param parameters
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "SetDefaults", action = "xtk:persist#SetDefaults")
    @WebResult(name = "SetDefaultsResponse", targetNamespace = "urn:xtk:session", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Element setDefaults(
        @WebParam(name = "SetDefaults", targetNamespace = "urn:xtk:session", partName = "parameters")
        SetDefaults parameters);

    /**
     * 
     * @param parameters
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "SetDefaultValues", action = "xtk:persist#SetDefaultValues")
    @WebResult(name = "SetDefaultValuesResponse", targetNamespace = "urn:xtk:session", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Element setDefaultValues(
        @WebParam(name = "SetDefaultValues", targetNamespace = "urn:xtk:session", partName = "parameters")
        SetDefaultValues parameters);

    /**
     * 
     * @param parameters
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "Load", action = "xtk:persist#Load")
    @WebResult(name = "LoadResponse", targetNamespace = "urn:xtk:session", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Element load(
        @WebParam(name = "Load", targetNamespace = "urn:xtk:session", partName = "parameters")
        Load parameters);

    /**
     * 
     * @param parameters
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "LoadIfExists", action = "xtk:persist#LoadIfExists")
    @WebResult(name = "LoadIfExistsResponse", targetNamespace = "urn:xtk:session", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Element loadIfExists(
        @WebParam(name = "LoadIfExists", targetNamespace = "urn:xtk:session", partName = "parameters")
        LoadIfExists parameters);

    /**
     * 
     * @param pkPk
     * @param sessiontoken
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "LoadAsText", action = "xtk:persist#LoadAsText")
    @WebResult(name = "pstrContent", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "LoadAsText", targetNamespace = "urn:xtk:session", className = "xtk.session.LoadAsText")
    @ResponseWrapper(localName = "LoadAsTextResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.LoadAsTextResponse")
    public String loadAsText(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "pkPk", targetNamespace = "urn:xtk:session")
        String pkPk);

    /**
     * 
     * @param parameters
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "Remove", action = "xtk:persist#Remove")
    @WebResult(name = "RemoveResponse", targetNamespace = "urn:xtk:session", partName = "parameters")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public Element remove(
        @WebParam(name = "Remove", targetNamespace = "urn:xtk:session", partName = "parameters")
        Remove parameters);

    /**
     * 
     * @param sessiontoken
     * @param entity
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetPkList", action = "xtk:persist#GetPkList")
    @WebResult(name = "ppklPkList", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "GetPkList", targetNamespace = "urn:xtk:session", className = "xtk.session.GetPkList")
    @ResponseWrapper(localName = "GetPkListResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.GetPkListResponse")
    public String getPkList(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "entity", targetNamespace = "urn:xtk:session")
        String entity);

    /**
     * 
     * @param sessiontoken
     * @param domDoc
     */
    @WebMethod(operationName = "Write", action = "xtk:persist#Write")
    @RequestWrapper(localName = "Write", targetNamespace = "urn:xtk:session", className = "xtk.session.Write")
    @ResponseWrapper(localName = "WriteResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.WriteResponse")
    public void write(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "domDoc", targetNamespace = "urn:xtk:session")
        Element domDoc);

    /**
     * 
     * @param sessiontoken
     * @param domDoc
     */
    @WebMethod(operationName = "WriteCollection", action = "xtk:persist#WriteCollection")
    @RequestWrapper(localName = "WriteCollection", targetNamespace = "urn:xtk:session", className = "xtk.session.WriteCollection")
    @ResponseWrapper(localName = "WriteCollectionResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.WriteCollectionResponse")
    public void writeCollection(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "domDoc", targetNamespace = "urn:xtk:session")
        Element domDoc);

    /**
     * 
     * @param bIgnoreDeleteStatus
     * @param sessiontoken
     * @param strSchema
     * @param elemWhere
     */
    @WebMethod(operationName = "DeleteCollection", action = "xtk:persist#DeleteCollection")
    @RequestWrapper(localName = "DeleteCollection", targetNamespace = "urn:xtk:session", className = "xtk.session.DeleteCollection")
    @ResponseWrapper(localName = "DeleteCollectionResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.DeleteCollectionResponse")
    public void deleteCollection(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "strSchema", targetNamespace = "urn:xtk:session")
        String strSchema,
        @WebParam(name = "elemWhere", targetNamespace = "urn:xtk:session")
        Element elemWhere,
        @WebParam(name = "bIgnoreDeleteStatus", targetNamespace = "urn:xtk:session")
        boolean bIgnoreDeleteStatus);

    /**
     * 
     * @param sessiontoken
     * @param domDoc
     */
    @WebMethod(operationName = "ImportCollection", action = "xtk:persist#ImportCollection")
    @RequestWrapper(localName = "ImportCollection", targetNamespace = "urn:xtk:session", className = "xtk.session.ImportCollection")
    @ResponseWrapper(localName = "ImportCollectionResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.ImportCollectionResponse")
    public void importCollection(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "domDoc", targetNamespace = "urn:xtk:session")
        Element domDoc);

    /**
     * 
     * @param sessiontoken
     * @param strPkList
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "GetImages", action = "xtk:persist#GetImages")
    @WebResult(name = "pdomDoc", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "GetImages", targetNamespace = "urn:xtk:session", className = "xtk.session.GetImages")
    @ResponseWrapper(localName = "GetImagesResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.GetImagesResponse")
    public Element getImages(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "strPkList", targetNamespace = "urn:xtk:session")
        String strPkList);

    /**
     * 
     * @param strMd5
     * @param sessiontoken
     * @param strPk
     * @param bMustExist
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "GetEntityIfMoreRecent", action = "xtk:persist#GetEntityIfMoreRecent")
    @WebResult(name = "pdomDoc", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "GetEntityIfMoreRecent", targetNamespace = "urn:xtk:session", className = "xtk.session.GetEntityIfMoreRecent")
    @ResponseWrapper(localName = "GetEntityIfMoreRecentResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.GetEntityIfMoreRecentResponse")
    public Element getEntityIfMoreRecent(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "strPk", targetNamespace = "urn:xtk:session")
        String strPk,
        @WebParam(name = "strMd5", targetNamespace = "urn:xtk:session")
        String strMd5,
        @WebParam(name = "bMustExist", targetNamespace = "urn:xtk:session")
        boolean bMustExist);

    /**
     * 
     * @param domCacheEntities
     * @param sessiontoken
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "GetDirtyCacheEntities", action = "xtk:persist#GetDirtyCacheEntities")
    @WebResult(name = "pdomDirtyEntities", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "GetDirtyCacheEntities", targetNamespace = "urn:xtk:session", className = "xtk.session.GetDirtyCacheEntities")
    @ResponseWrapper(localName = "GetDirtyCacheEntitiesResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.GetDirtyCacheEntitiesResponse")
    public Element getDirtyCacheEntities(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "domCacheEntities", targetNamespace = "urn:xtk:session")
        Element domCacheEntities);

    /**
     * 
     * @param sessiontoken
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "GetActiveApplicationMenus", action = "xtk:persist#GetActiveApplicationMenus")
    @WebResult(name = "pdomDoc", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "GetActiveApplicationMenus", targetNamespace = "urn:xtk:session", className = "xtk.session.GetActiveApplicationMenus")
    @ResponseWrapper(localName = "GetActiveApplicationMenusResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.GetActiveApplicationMenusResponse")
    public Element getActiveApplicationMenus(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken);

    /**
     * 
     * @param sessiontoken
     * @param strSchema
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "GetDefaultEntity", action = "xtk:persist#GetDefaultEntity")
    @WebResult(name = "pdomDoc", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "GetDefaultEntity", targetNamespace = "urn:xtk:session", className = "xtk.session.GetDefaultEntity")
    @ResponseWrapper(localName = "GetDefaultEntityResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.GetDefaultEntityResponse")
    public Element getDefaultEntity(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "strSchema", targetNamespace = "urn:xtk:session")
        String strSchema);

    /**
     * 
     * @param strLogin
     * @param pSessionInfo
     * @param elemParameters
     * @param pstrSecurityToken
     * @param sessiontoken
     * @param pstrSessionToken
     * @param strPassword
     */
    @WebMethod(operationName = "Logon", action = "xtk:session#Logon")
    @RequestWrapper(localName = "Logon", targetNamespace = "urn:xtk:session", className = "xtk.session.Logon")
    @ResponseWrapper(localName = "LogonResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.LogonResponse")
    public void logon(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "strLogin", targetNamespace = "urn:xtk:session")
        String strLogin,
        @WebParam(name = "strPassword", targetNamespace = "urn:xtk:session")
        String strPassword,
        @WebParam(name = "elemParameters", targetNamespace = "urn:xtk:session")
        Element elemParameters,
        @WebParam(name = "pstrSessionToken", targetNamespace = "urn:xtk:session", mode = WebParam.Mode.OUT)
        Holder<String> pstrSessionToken,
        @WebParam(name = "pSessionInfo", targetNamespace = "urn:xtk:session", mode = WebParam.Mode.OUT)
        Holder<Element> pSessionInfo,
        @WebParam(name = "pstrSecurityToken", targetNamespace = "urn:xtk:session", mode = WebParam.Mode.OUT)
        Holder<String> pstrSecurityToken);

    /**
     * 
     * @param sessiontoken
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "GetUserInfo", action = "xtk:session#GetUserInfo")
    @WebResult(name = "pUserInfo", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "GetUserInfo", targetNamespace = "urn:xtk:session", className = "xtk.session.GetUserInfo")
    @ResponseWrapper(localName = "GetUserInfoResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.GetUserInfoResponse")
    public Element getUserInfo(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken);

    /**
     * 
     * @param sessiontoken
     */
    @WebMethod(operationName = "Logoff", action = "xtk:session#Logoff")
    @RequestWrapper(localName = "Logoff", targetNamespace = "urn:xtk:session", className = "xtk.session.Logoff")
    @ResponseWrapper(localName = "LogoffResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.LogoffResponse")
    public void logoff(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken);

    /**
     * 
     * @param sessiontoken
     * @param strId
     */
    @WebMethod(operationName = "KillSession", action = "xtk:session#KillSession")
    @RequestWrapper(localName = "KillSession", targetNamespace = "urn:xtk:session", className = "xtk.session.KillSession")
    @ResponseWrapper(localName = "KillSessionResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.KillSessionResponse")
    public void killSession(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "strId", targetNamespace = "urn:xtk:session")
        String strId);

    /**
     * 
     * @param sessiontoken
     */
    @WebMethod(operationName = "TestCnx", action = "xtk:session#TestCnx")
    @RequestWrapper(localName = "TestCnx", targetNamespace = "urn:xtk:session", className = "xtk.session.TestCnx")
    @ResponseWrapper(localName = "TestCnxResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.TestCnxResponse")
    public void testCnx(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken);

    /**
     * 
     * @param sessiontoken
     * @param strNewPassword
     * @param strOldPassword
     */
    @WebMethod(operationName = "ChangePassword", action = "xtk:session#ChangePassword")
    @RequestWrapper(localName = "ChangePassword", targetNamespace = "urn:xtk:session", className = "xtk.session.ChangePassword")
    @ResponseWrapper(localName = "ChangePasswordResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.ChangePasswordResponse")
    public void changePassword(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "strOldPassword", targetNamespace = "urn:xtk:session")
        String strOldPassword,
        @WebParam(name = "strNewPassword", targetNamespace = "urn:xtk:session")
        String strNewPassword);

    /**
     * 
     * @param sessiontoken
     * @return
     *     returns javax.xml.datatype.XMLGregorianCalendar
     */
    @WebMethod(operationName = "GetServerTime", action = "xtk:session#GetServerTime")
    @WebResult(name = "ptmServerTime", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "GetServerTime", targetNamespace = "urn:xtk:session", className = "xtk.session.GetServerTime")
    @ResponseWrapper(localName = "GetServerTimeResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.GetServerTimeResponse")
    public XMLGregorianCalendar getServerTime(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken);

    /**
     * 
     * @param sessiontoken
     */
    @WebMethod(operationName = "ServerShutdown", action = "xtk:session#ServerShutdown")
    @RequestWrapper(localName = "ServerShutdown", targetNamespace = "urn:xtk:session", className = "xtk.session.ServerShutdown")
    @ResponseWrapper(localName = "ServerShutdownResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.ServerShutdownResponse")
    public void serverShutdown(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken);

    /**
     * 
     * @param strName
     * @param sessiontoken
     * @param pstrValue
     * @param pbtType
     */
    @WebMethod(operationName = "GetOption", action = "xtk:session#GetOption")
    @RequestWrapper(localName = "GetOption", targetNamespace = "urn:xtk:session", className = "xtk.session.GetOption")
    @ResponseWrapper(localName = "GetOptionResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.GetOptionResponse")
    public void getOption(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "strName", targetNamespace = "urn:xtk:session")
        String strName,
        @WebParam(name = "pstrValue", targetNamespace = "urn:xtk:session", mode = WebParam.Mode.OUT)
        Holder<String> pstrValue,
        @WebParam(name = "pbtType", targetNamespace = "urn:xtk:session", mode = WebParam.Mode.OUT)
        Holder<Byte> pbtType);

    /**
     * 
     * @param lCount
     * @param sessiontoken
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetNewIds", action = "xtk:session#GetNewIds")
    @WebResult(name = "pstrIdList", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "GetNewIds", targetNamespace = "urn:xtk:session", className = "xtk.session.GetNewIds")
    @ResponseWrapper(localName = "GetNewIdsResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.GetNewIdsResponse")
    public String getNewIds(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "lCount", targetNamespace = "urn:xtk:session")
        int lCount);

    /**
     * 
     * @param lCount
     * @param sessiontoken
     * @param strSequence
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "GetNewIdsEx", action = "xtk:session#GetNewIdsEx")
    @WebResult(name = "pstrIdList", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "GetNewIdsEx", targetNamespace = "urn:xtk:session", className = "xtk.session.GetNewIdsEx")
    @ResponseWrapper(localName = "GetNewIdsExResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.GetNewIdsExResponse")
    public String getNewIdsEx(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "lCount", targetNamespace = "urn:xtk:session")
        int lCount,
        @WebParam(name = "strSequence", targetNamespace = "urn:xtk:session")
        String strSequence);

    /**
     * 
     * @param sessiontoken
     * @return
     *     returns xtk.session.Element
     */
    @WebMethod(operationName = "GetCnxInfo", action = "xtk:session#GetCnxInfo")
    @WebResult(name = "pdomCnxInfo", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "GetCnxInfo", targetNamespace = "urn:xtk:session", className = "xtk.session.GetCnxInfo")
    @ResponseWrapper(localName = "GetCnxInfoResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.GetCnxInfoResponse")
    public Element getCnxInfo(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken);

    /**
     * 
     * @param strDataPolicy
     * @param sessiontoken
     * @param strValue
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "FormatDataPolicy", action = "xtk:session#FormatDataPolicy")
    @WebResult(name = "pstrResult", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "FormatDataPolicy", targetNamespace = "urn:xtk:session", className = "xtk.session.FormatDataPolicy")
    @ResponseWrapper(localName = "FormatDataPolicyResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.FormatDataPolicyResponse")
    public String formatDataPolicy(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "strDataPolicy", targetNamespace = "urn:xtk:session")
        String strDataPolicy,
        @WebParam(name = "strValue", targetNamespace = "urn:xtk:session")
        String strValue);

    /**
     * 
     * @param sessiontoken
     * @param strDecrypted
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "Encrypt", action = "xtk:session#Encrypt")
    @WebResult(name = "pstrEncrypted", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "Encrypt", targetNamespace = "urn:xtk:session", className = "xtk.session.Encrypt")
    @ResponseWrapper(localName = "EncryptResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.EncryptResponse")
    public String encrypt(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "strDecrypted", targetNamespace = "urn:xtk:session")
        String strDecrypted);

    /**
     * 
     * @param sessiontoken
     * @param strDecrypted
     * @return
     *     returns java.lang.String
     */
    @WebMethod(operationName = "EncryptServerPassword", action = "xtk:session#EncryptServerPassword")
    @WebResult(name = "pstrEncrypted", targetNamespace = "urn:xtk:session")
    @RequestWrapper(localName = "EncryptServerPassword", targetNamespace = "urn:xtk:session", className = "xtk.session.EncryptServerPassword")
    @ResponseWrapper(localName = "EncryptServerPasswordResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.EncryptServerPasswordResponse")
    public String encryptServerPassword(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "strDecrypted", targetNamespace = "urn:xtk:session")
        String strDecrypted);

    /**
     * 
     * @param pkPk
     * @param pstrCurrent
     * @param sessiontoken
     * @param pstrOriginal
     */
    @WebMethod(operationName = "Diff", action = "xtk:session#Diff")
    @RequestWrapper(localName = "Diff", targetNamespace = "urn:xtk:session", className = "xtk.session.Diff")
    @ResponseWrapper(localName = "DiffResponse", targetNamespace = "urn:xtk:session", className = "xtk.session.DiffResponse")
    public void diff(
        @WebParam(name = "sessiontoken", targetNamespace = "urn:xtk:session")
        String sessiontoken,
        @WebParam(name = "pkPk", targetNamespace = "urn:xtk:session")
        String pkPk,
        @WebParam(name = "pstrOriginal", targetNamespace = "urn:xtk:session", mode = WebParam.Mode.OUT)
        Holder<String> pstrOriginal,
        @WebParam(name = "pstrCurrent", targetNamespace = "urn:xtk:session", mode = WebParam.Mode.OUT)
        Holder<String> pstrCurrent);

}
